name: 🚀 CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: 'false'
        type: boolean

env:
  PROJECT_ID: pinky-promise-app
  GAR_LOCATION: us-central1
  REPOSITORY: pinky-promise-app
  SERVICE: pinky-promise-app
  REGION: us-central1

jobs:
  # ===============================================
  # 🔍 LINT AND TEST
  # ===============================================
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🧪 Run tests
      run: |
        echo "Running tests..."
        npm test --if-present || echo "No tests defined yet"
    
    - name: 🔍 Lint code
      run: |
        echo "Linting code..."
        npm run lint --if-present || echo "No lint script defined"

  # ===============================================
  # 🏗️ BUILD AND PUSH CONTAINER IMAGE
  # ===============================================
  build:
    name: 🏗️ Build & Push Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔧 Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker gcr.io
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          APP_VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # ===============================================
  # 📝 UPDATE KUBERNETES MANIFESTS
  # ===============================================
  update-manifests:
    name: 📝 Update K8s Manifests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract image tag
      id: extract-tag
      run: |
        # Extract the latest tag from the build output
        FULL_TAG="${{ needs.build.outputs.image-tag }}"
        # Get just the tag part (after the last colon)
        IMAGE_TAG=$(echo "$FULL_TAG" | cut -d' ' -f1 | cut -d':' -f2)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Extracted tag: $IMAGE_TAG"
    
    - name: 📝 Update Kustomization with new image tag
      run: |
        # Update the production kustomization with the new image tag
        sed -i "s|newTag: .*|newTag: ${{ steps.extract-tag.outputs.IMAGE_TAG }}|g" k8s/overlays/production/kustomization.yaml
        
        # Show the changes
        echo "Updated kustomization.yaml:"
        cat k8s/overlays/production/kustomization.yaml
    
    - name: 🔍 Validate Kubernetes manifests
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Validate the manifests
        kubectl kustomize k8s/overlays/production > /tmp/manifests.yaml
        echo "✅ Kubernetes manifests are valid"
    
    - name: 📤 Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add k8s/overlays/production/kustomization.yaml
          git commit -m "🚀 Update image tag to ${{ steps.extract-tag.outputs.IMAGE_TAG }}
          
          - Image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ steps.extract-tag.outputs.IMAGE_TAG }}
          - Commit: ${{ github.sha }}
          - Deployed by: ${{ github.actor }}"
          
          git push
          echo "✅ Pushed manifest updates"
        fi

  # ===============================================
  # 📊 DEPLOYMENT NOTIFICATION
  # ===============================================
  notify:
    name: 📊 Deployment Status
    runs-on: ubuntu-latest
    needs: [build, update-manifests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📝 Manifests | ${{ needs.update-manifests.result == 'success' && '✅ Updated' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ needs.build.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Next:** ArgoCD will automatically sync the deployment to the cluster." >> $GITHUB_STEP_SUMMARY

