version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: pinky-promise-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-pinky_promise}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ../backend
      dockerfile: ../deploy/backend/Dockerfile
    container_name: pinky-promise-backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-pinky_promise}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
    ports:
      - "5001:5001"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5001"]
      interval: 30s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ../pinky-promise-app
      dockerfile: ../deploy/frontend/Dockerfile
    container_name: pinky-promise-frontend
    restart: always
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
