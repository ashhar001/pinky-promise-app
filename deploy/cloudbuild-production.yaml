# Production Cloud Build configuration for Pinky Promise App
# This configuration implements a production-ready CI/CD pipeline

steps:
  # 1. Run security and quality checks
  - name: 'gcr.io/cloud-builders/npm'
    id: 'backend-security-audit'
    dir: 'backend'
    args: ['audit', '--audit-level=moderate']
    
  - name: 'gcr.io/cloud-builders/npm'
    id: 'frontend-security-audit'
    dir: 'pinky-promise-app'
    args: ['audit', '--audit-level=moderate']

  # 2. Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'backend-install'
    dir: 'backend'
    args: ['ci']
    waitFor: ['backend-security-audit']

  - name: 'gcr.io/cloud-builders/npm'
    id: 'frontend-install'
    dir: 'pinky-promise-app'
    args: ['ci']
    waitFor: ['frontend-security-audit']

  # 3. Run tests
  - name: 'gcr.io/cloud-builders/npm'
    id: 'backend-test'
    dir: 'backend'
    args: ['test']
    waitFor: ['backend-install']
    env:
      - 'NODE_ENV=test'

  - name: 'gcr.io/cloud-builders/npm'
    id: 'frontend-test'
    dir: 'pinky-promise-app'
    args: ['test', '--', '--watchAll=false', '--coverage']
    waitFor: ['frontend-install']
    env:
      - 'CI=true'

  # 4. Build Docker images with security scanning
  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-build'
    args: [
      'build',
      '--platform', 'linux/amd64',
      '-t', 'gcr.io/$PROJECT_ID/pinky-promise-backend:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/pinky-promise-backend:prod-latest',
      '-f', 'deploy/backend/Dockerfile',
      './backend'
    ]
    waitFor: ['backend-test']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'frontend-build'
    args: [
      'build',
      '--platform', 'linux/amd64',
      '--build-arg', 'REACT_APP_API_URL=https://api.pinky-promise.example.com',
      '-t', 'gcr.io/$PROJECT_ID/pinky-promise-frontend:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/pinky-promise-frontend:prod-latest',
      '-f', 'deploy/frontend/Dockerfile',
      './pinky-promise-app'
    ]
    waitFor: ['frontend-test']

  # 5. Push images to registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-push'
    args: ['push', '--all-tags', 'gcr.io/$PROJECT_ID/pinky-promise-backend']
    waitFor: ['backend-build']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'frontend-push'
    args: ['push', '--all-tags', 'gcr.io/$PROJECT_ID/pinky-promise-frontend']
    waitFor: ['frontend-build']

  # 6. Deploy to staging first (Blue-Green deployment)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'backend-deploy-staging'
    entrypoint: gcloud
    args: [
      'run', 'deploy', 'pinky-promise-backend-staging',
      '--image', 'gcr.io/$PROJECT_ID/pinky-promise-backend:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--no-allow-unauthenticated',
      '--memory', '1Gi',
      '--cpu', '1',
      '--concurrency', '100',
      '--max-instances', '10',
      '--set-env-vars', 'NODE_ENV=staging',
      '--tag', 'staging'
    ]
    waitFor: ['backend-push']

  # 7. Deploy to production with no traffic
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'backend-deploy-production'
    entrypoint: gcloud
    args: [
      'run', 'deploy', 'pinky-promise-backend',
      '--image', 'gcr.io/$PROJECT_ID/pinky-promise-backend:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '2Gi',
      '--cpu', '2',
      '--concurrency', '100',
      '--min-instances', '1',
      '--max-instances', '20',
      '--set-env-vars', 'NODE_ENV=production',
      '--no-traffic'
    ]
    waitFor: ['backend-deploy-staging']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'frontend-deploy-production'
    entrypoint: gcloud
    args: [
      'run', 'deploy', 'pinky-promise-frontend',
      '--image', 'gcr.io/$PROJECT_ID/pinky-promise-frontend:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '512Mi',
      '--cpu', '1',
      '--concurrency', '80',
      '--min-instances', '1',
      '--max-instances', '10',
      '--no-traffic'
    ]
    waitFor: ['backend-deploy-staging']

  # 8. Gradual traffic migration (Canary deployment)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'traffic-migration-backend'
    entrypoint: gcloud
    args: [
      'run', 'services', 'update-traffic', 'pinky-promise-backend',
      '--region', 'us-central1',
      '--to-latest', '100'
    ]
    waitFor: ['backend-deploy-production']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'traffic-migration-frontend'
    entrypoint: gcloud
    args: [
      'run', 'services', 'update-traffic', 'pinky-promise-frontend',
      '--region', 'us-central1',
      '--to-latest', '100'
    ]
    waitFor: ['frontend-deploy-production']

# Store images in Google Container Registry
images:
  - 'gcr.io/$PROJECT_ID/pinky-promise-backend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/pinky-promise-backend:prod-latest'
  - 'gcr.io/$PROJECT_ID/pinky-promise-frontend:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/pinky-promise-frontend:prod-latest'

# Build options for production
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  
# Timeout (1.5 hours to account for all stages)
timeout: 5400s

